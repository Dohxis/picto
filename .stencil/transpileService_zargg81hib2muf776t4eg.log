{"moduleFile":{"sourceFilePath":"/Users/casey/Misc/stencil-mill/src/components/picto-md/picto-md.tsx","localImports":[],"externalImports":["@stencil/core","marked-ts","marked-ts"],"potentialCmpRefs":[],"cmpMeta":{"tagNameMeta":"picto-md","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/Users/casey/Misc/stencil-mill/src/components/picto-md/picto-md.styl","cmpRelativePath":"picto-md.styl","originalComponentPath":"picto-md.styl"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"Markdown","documentation":"","type":"typeof Markdown"},"encapsulationMeta":1,"componentClass":"Markdown","membersMeta":{},"eventsMeta":[],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/casey/Misc/stencil-mill/src/components/picto-md/picto-md.js"},"jsText":"import * as M from 'marked-ts';\r\nconst { Marked } = M.default;\r\nexport class Markdown {\r\n    componentDidLoad() {\r\n        this.observer = new MutationObserver(([mutation], observer) => {\r\n            if (mutation.type === 'characterData') {\r\n                console.log('aye', mutation);\r\n                this.renderMarkdown(mutation.target.textContent);\r\n            }\r\n        });\r\n        this.observer.observe(this.el, {\r\n            characterData: true,\r\n            subtree: true\r\n        });\r\n        this.renderMarkdown(this.el.textContent);\r\n    }\r\n    componentDidUnload() {\r\n        this.observer.disconnect();\r\n    }\r\n    renderMarkdown(src) {\r\n        console.log('aye', src, this.el);\r\n        this.el.innerHTML = Marked.parse(src);\r\n    }\r\n    render() {\r\n        return h(\"div\", { ref: el => this.el = el });\r\n    }\r\n    static get is() { return \"picto-md\"; }\r\n    static get encapsulation() { return \"shadow\"; }\r\n    static get style() { return \"/**style-placeholder:picto-md:**/\"; }\r\n}\r\n"}